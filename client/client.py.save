import pandas as pd
import numpy as np
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from sklearn.preprocessing import LabelEncoder, StandardScaler
import flwr as fl
import sys

# ----------------------------
# Load and preprocess local data
# ----------------------------

class DrugDemandDataset(Dataset):
    def __init__(self, csv_path):
        df = pd.read_csv(csv_path)

        # Feature engineering
        df['date'] = pd.to_datetime(df['date'])
        df['day_of_week'] = df['date'].dt.dayofweek

        le_drug = LabelEncoder()
        df['drug_encoded'] = le_drug.fit_transform(df['drug_name'])

        df = df.drop(columns=['date', 'hospital_id', 'drug_name'])

        X = df.drop(columns=['demand']).values
        y = df['demand'].values

        # Scale features
        scaler = StandardScaler()
        X = scaler.fit_transform(X)

        self.X = torch.tensor(X, dtype=torch.float32)
        self.y = torch.tensor(y, dtype=torch.float32).view(-1, 1)

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

# ----------------------------
# Define the model
# ----------------------------

class DrugDemandMLP(nn.Module):
    def __init__(self, input_dim):
        super(DrugDemandMLP, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1)
        )

    def forward(self, x):
        return self.model(x)

# ----------------------------
# Define Flower client
# ----------------------------

class FlowerClient(fl.client.NumPyClient):
    def __init__(self, model, train_loader):
        self.model = model
        self.train_loader = train_loader
        self.loss_fn = nn.MSELoss()
        self.optimizer = torch.optim.Adam(self.model.parameters(), lr=0.001)

    def get_parameters(self, config=None):
        return [val.cpu().numpy() for val in self.model.state_dict().values()]

    def set_parameters(self, parameters):
        params_dict = zip(self.model.state_dict().keys(), parameters)
        state_dict = {k: torch.tensor(v) for k, v in params_dict}
        self.model.load_state_dict(state_dict, strict=True)

    def fit(self, parameters, config):
        self.set_parameters(parameters)
        self.model.train()
        for epoch in range(5):  # local epochs
            for X_batch, y_batch in self.train_loader:
                self.optimizer.zero_grad()
                preds = self.model(X_batch)
                loss = self.loss_fn(preds, y_batch)
                loss.backward()
                self.optimizer.step()
        return self.get_parameters(), len(self.train_loader.dataset), {}

    def evaluate(self, parameters, config):
        self.set_parameters(parameters)
        self.model.eval()
        loss = 0.0
        with torch.no_grad():
            for X_batch, y_batch in self.train_loader:
                preds = self.model(X_batch)
                loss += self.loss_fn(preds, y_batch).item()
        return float(loss / len(self.train_loader)), len(self.train_loader.dataset), {}

# ----------------------------
# Main: Run Flower client
# ----------------------------

if __name__ == "__main__":
    # Get client ID (A, B, or C) from command-line
    if len(sys.argv) < 2:
        print("Usage: python client.py A")
        sys.exit(1)

    client_id = sys.argv[1]
    csv_path = f"../data/inventory_Hosp_{client_id}.csv"

    # Load dataset
    dataset = DrugDemandDataset(csv_path)
    train_loader = DataLoader(dataset, batch_size=32, shuffle=True)

    # Create model
    model = DrugDemandMLP(input_dim=3)

    # Start Flower client
    fl.client.start_numpy_client(server_address="127.0.0.1:8080", client=FlowerClient(model, train_loader))
